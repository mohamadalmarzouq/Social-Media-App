// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  DESIGNER
}

enum Platform {
  LOGO
  INSTAGRAM
  TIKTOK
}

enum FileType {
  STATIC_POST
  ANIMATED_POST
}

enum PackageType {
  PACKAGE_1
  PACKAGE_2
  PACKAGE_3
}

enum ContestStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  PASSED
  WINNER
}

enum AssetType {
  IMAGE
  VIDEO
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  brands       Brand[]
  contests     Contest[]
  submissions  Submission[]
  comments     Comment[]

  @@map("users")
}

model Brand {
  id          String   @id @default(cuid())
  userId      String
  logoUrl     String?
  colors      String[] // JSON array of hex colors
  fonts       String[] // JSON array of font names
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contests Contest[]

  @@unique([userId]) // so upsert by userId works
  @@map("brands")
}

model Contest {
  id                  String        @id @default(cuid())
  userId              String
  brandId             String
  title               String
  description         String?
  platform            Platform
  fileType            FileType?     // Type of files needed (Static Post, Animated Post)
  packageType         PackageType?  // Package type (Package 1, 2, or 3)
  packageQuota        Int           // Expected submissions per package (30, 60, 90)
  winnersNeeded       Int           // Number of winners needed (1, 2, 3)
  expectedSubmissions Int           // Expected submissions per round
  status              ContestStatus @default(DRAFT)
  round               Int           @default(1)
  acceptedCount       Int           @default(0) // Track accepted designs
  winningSubmissionId String?       // ID of the winning submission
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand       Brand        @relation(fields: [brandId], references: [id], onDelete: Cascade)
  submissions Submission[]
  winningSubmission Submission? @relation("WinningSubmission", fields: [winningSubmissionId], references: [id])

  @@map("contests")
}

model Submission {
  id         String           @id @default(cuid())
  contestId  String
  designerId String
  round      Int
  status     SubmissionStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relations
  contest  Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  designer User      @relation(fields: [designerId], references: [id], onDelete: Cascade)
  assets   Asset[]
  comments Comment[]
  winningFor Contest[] @relation("WinningSubmission")

  @@unique([contestId, designerId, round])
  @@map("submissions")
}

model Comment {
  id           String   @id @default(cuid())
  submissionId String
  authorId     String
  message      String
  createdAt    DateTime @default(now())

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Asset {
  id           String    @id @default(cuid())
  submissionId String
  url          String    // Storage key/path
  filename     String
  type         AssetType
  width        Int?
  height       Int?
  mimeType     String
  fileSize     Int
  createdAt    DateTime  @default(now())

  // Relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("assets")
}
