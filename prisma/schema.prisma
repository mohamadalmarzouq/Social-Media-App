generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  passwordHash String
  role         Role
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  brands       Brand?
  comments     Comment[]
  contests     Contest[]
  submissions  Submission[]

  @@map("users")
}

model Brand {
  id          String    @id @default(cuid())
  userId      String    @unique
  logoUrl     String?
  colors      String[]
  fonts       String[]
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contests    Contest[]

  @@map("brands")
}

model Contest {
  id                  String        @id @default(cuid())
  userId              String
  brandId             String
  title               String
  description         String?
  platform            Platform
  packageQuota        Int
  expectedSubmissions Int
  status              ContestStatus @default(DRAFT)
  round               Int           @default(1)
  acceptedCount       Int           @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  fileType            FileType?
  packageType         PackageType?
  winningSubmissionId String?
  winnersNeeded       Int
  brand               Brand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  winningSubmission   Submission?   @relation("WinningSubmission", fields: [winningSubmissionId], references: [id])
  submissions         Submission[]

  @@map("contests")
}

model Submission {
  id         String           @id @default(cuid())
  contestId  String
  designerId String
  round      Int
  status     SubmissionStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  assets     Asset[]
  comments   Comment[]
  winningFor Contest[]        @relation("WinningSubmission")
  contest    Contest          @relation(fields: [contestId], references: [id], onDelete: Cascade)
  designer   User             @relation(fields: [designerId], references: [id], onDelete: Cascade)

  @@unique([contestId, designerId, round])
  @@map("submissions")
}

model Comment {
  id           String     @id @default(cuid())
  submissionId String
  authorId     String
  message      String
  createdAt    DateTime   @default(now())
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Asset {
  id           String     @id @default(cuid())
  submissionId String
  url          String
  filename     String
  type         AssetType
  width        Int?
  height       Int?
  mimeType     String
  fileSize     Int
  createdAt    DateTime   @default(now())
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("assets")
}

enum Role {
  USER
  DESIGNER
}

enum Platform {
  INSTAGRAM
  TIKTOK
  LOGO
}

enum FileType {
  STATIC_POST
  ANIMATED_POST
}

enum PackageType {
  PACKAGE_1
  PACKAGE_2
  PACKAGE_3
}

enum ContestStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  PASSED
  WINNER
}

enum AssetType {
  IMAGE
  VIDEO
}
